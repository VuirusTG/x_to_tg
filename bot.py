import tweepy
import asyncio
import logging
from telegram import Bot
from telegram.constants import ParseMode
import json
import os
from datetime import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BEARER_TOKEN = os.getenv('BEARER_TOKEN', "AAAAAAAAAAAAAAAAAAAAAF0U3QEAAAAAZ1mMW0tIY3J2WYlyLrK6KEg2UDM%3DCQ1BUccUEoPm56Osb4LaFIrQarMphlEKK7Klx0mUVvCARC4wQi")
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', "6020853840:AAG6XrAbh05rCUt9zPO-nq8F6pLkI40PZEo")
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', "587512070")

# –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
TWITTER_ACCOUNTS = ["Xenea_io", "pharos_network", "opnetbtc", "owb_studio"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Twitter API
twitter_client = tweepy.Client(
    bearer_token=BEARER_TOKEN, 
    wait_on_rate_limit=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
telegram_bot = Bot(token=TELEGRAM_BOT_TOKEN)

class TwitterMonitor:
    def __init__(self):
        self.last_tweet_ids = self.load_last_tweet_ids()
    
    def load_last_tweet_ids(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID —Ç–≤–∏—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('last_tweets.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {account: None for account in TWITTER_ACCOUNTS}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ last_tweets.json: {e}")
            return {account: None for account in TWITTER_ACCOUNTS}
    
    def save_last_tweet_ids(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID —Ç–≤–∏—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open('last_tweets.json', 'w') as f:
                json.dump(self.last_tweet_ids, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è last_tweets.json: {e}")
    
    async def get_user_info(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            user = twitter_client.get_user(
                username=username,
                user_fields=['name', 'username', 'profile_image_url']
            )
            return user.data if user.data else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}: {e}")
            return None
    
    async def get_user_tweets(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–≤–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = await self.get_user_info(username)
            if not user:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã
            tweets = twitter_client.get_users_tweets(
                id=user.id,
                max_results=20,
                tweet_fields=['created_at', 'author_id', 'public_metrics', 'attachments', 'text'],
                exclude=['retweets', 'replies']
            )
            
            return tweets.data if tweets.data else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–≤–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
            return []
    
    def format_tweet_text(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–≤–∏—Ç–∞ –¥–ª—è Telegram"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤
        text = re.sub(r'#(\w+)', r'<b>#\1</b>', text)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        text = re.sub(r'@(\w+)', r'@<a href="https://twitter.com/\1">\1</a>', text)
        return text
    
    async def send_telegram_message(self, message_text, tweet_url):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            full_message = f"{message_text}\n\nüîó <a href='{tweet_url}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–≤–∏—Ç—É</a>"
            
            await telegram_bot.send_message(
                chat_id=TELEGRAM_CHAT_ID,
                text=full_message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
    
    async def process_account_tweets(self, account):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–∏—Ç–æ–≤ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–≤–∏—Ç–æ–≤ –¥–ª—è @{account}")
            tweets = await self.get_user_tweets(account)
            
            if not tweets:
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            tweets = sorted(tweets, key=lambda x: x.created_at, reverse=True)
            
            new_tweets_count = 0
            for tweet in reversed(tweets):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                tweet_id = str(tweet.id)
                last_id = self.last_tweet_ids.get(account)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–≤–∏—Ç—ã
                if last_id and tweet_id <= last_id:
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                user_info = await self.get_user_info(account)
                user_name = user_info.name if user_info else account
                
                message_text = f"<b>{user_name} (@{account})</b>\n\n"
                message_text += self.format_tweet_text(tweet.text)
                message_text += f"\n\n<i>üìÖ {tweet.created_at.strftime('%d.%m.%Y %H:%M')}</i>"
                
                tweet_url = f"https://twitter.com/{account}/status/{tweet_id}"
                
                await self.send_telegram_message(message_text, tweet_url)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
                self.last_tweet_ids[account] = tweet_id
                new_tweets_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(2)
            
            if new_tweets_count > 0:
                self.save_last_tweet_ids()
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {new_tweets_count} –Ω–æ–≤—ã—Ö —Ç–≤–∏—Ç–æ–≤ –æ—Ç @{account}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account}: {e}")
    
    async def process_all_accounts(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–∏—Ç–æ–≤ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        for account in TWITTER_ACCOUNTS:
            await self.process_account_tweets(account)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            await asyncio.sleep(5)
    
    async def run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        while True:
            try:
                await self.process_all_accounts()
                # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(600)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = TwitterMonitor()
    await monitor.run_monitoring()

if __name__ == "__main__":
    asyncio.run(main())